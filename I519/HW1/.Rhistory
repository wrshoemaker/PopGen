xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=rRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of rRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 2.5, y = 0.14, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=rRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of rRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 2.5, y = 0.14, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
library(ggplot2)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 2.5, y = 0.14, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 58, y = 60, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 55, y = 66, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
library(Hmisc)
rcorr(as.matrix(log.genome), type="pearson")
p1 <- ggplot(log.genome , aes(x=tRNA.count, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Number of tRNAs") +
ylab(expression(m[max])) +
annotate("text", x = 44, y = 0.11, label = "a")
p2 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=tRNA.count)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab("Number of tRNAs") +
annotate("text", x = 55, y = 67, label = "c")
p3 <- ggplot(log.genome, aes(x=Effective.Codon.Size, y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab(expression(N[c])) +
ylab(expression(m[max])) +
annotate("text", x = 55, y = 0.11, label = "b")
p4 <- ggplot(log.genome , aes(x=Genome.size..Mbp., y=mmax)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm) +
xlab("Genome size (Mbp), log10") +
ylab(expression(m[max])) +
annotate("text", x = 6.45, y = 0.11, label = "d")
multiplot(p1, p2, p3, p4, cols=2)
rcorr(as.matrix(log.genome), type="pearson")
min.model <- lm(mmax ~ 1, data=no.trnas.withSum.nolag)
biggest <- formula(lm(mmax~.,no.trnas.withSum.nolag))
biggest
fwd.model <- stepAIC(min.model, direction='forward', scope=list(lower=null, upper = full))
fwd.model <- step(min.model, direction='forward', scope=list(lower=null, upper = full))
fwd.model <- step(min.model, direction='forward', scope=list(lower=min.model, upper = biggest))
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(biggest)
biggest
plot(biggest)
outliers(biggest)
library(car)
outliers(biggest)
outlierTest(biggest)
qqPlot(biggest)
biggest
biggest.actual <- lm(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=no.trnas.withSum.nolag)
qqPlot(biggest.actual)
no.trnas.withSum.nolag
biggest.actual <- lm(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=log.genome)
qqPlot(biggest.actual)
leverageplots(log.genome)
leveragePlots(log.genome)
leveragePlots(biggest.actual)
plot.lm(biggest.actual)
plot(biggest.actual)
qqnorm(biggest.actual)
library(leaps)
summary(leaps)
summary(biggest.actual)
plot(biggest.actual="r2")
plot(biggest.actual, scale="r2")
subsets(biggest.actual, statistic="rsq")
biggest.allsubsets<-regsubsets(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=log.genome, nbest=10)
summary(biggest.allsubsets)
plot(biggest.allsubsets, scale="r2")
plot(biggest.allsubsets, scale="r2")
plot(biggest.allsubsets, scale="r2")
subsets(biggest.allsubsets, statistic="rsq")
model.select(test, sig=0.15, verbose=T)
summary(test)
stepwise(biggest, min.model, alpha.to.enter=0.05, alpha.to.leave=0.10)
par(mar=c(1,1,1,1))
biggest
min.model
biggest.actual <- lm(mmax ~ Effective.Codon.Size + Genome.size..Mbp. + rRNA.count +
tRNA.count, data=log.genome)
min.model <- lm(mmax ~ 1, data=no.trnas.withSum.nolag)
biggest <- formula(lm(mmax~.,no.trnas.withSum.nolag))
biggest
fwd.model <- step(min.model, direction='forward', scope=list(lower=min.model, upper = biggest))
lm.just.trna <- lm(mmax ~ tRNA.count)
lm.just.trna <- lm(mmax ~ tRNA.count, data=log.genome)
require(graphics)
lm.just.trna.noIntercept <- lm(mmax ~ tRNA.count - 1, data=log.genome)
anova(lm.just.trna)
summary(lm.just.trna.noIntercept)
plot(lm.just.trna, las = 1)      # Residuals, Fitted, ...
stepwise(biggest, min.model, alpha.to.enter=0.05, alpha.to.leave=0.10)
model.select(test, sig=0.15, verbose=T)
stepAIC(min.model, biggest.actual, direction='forward')
library(MASS)
stepAIC(min.model, biggest.actual, direction='forward')
step <- stepAIC(biggest.actual, direction="both")
step$anova
g <- glm(Y ~ ., data=log.genome)
g <- glm(mmax ~ ., data=log.genome)
g <- glm(mmax ~ .*., data=log.genome)
formula(g)
install.packages("bestglm")
library("bestglm")
bestglm(log.genome, IC="AIC")
log.genome
model <- lm(nmax <- Effective.Codon.Size *Genome.size..Mbp, data = log.genome)
model <- lm(nmax <- log.genome$Effective.Codon.Size *Genome.size..Mbp, data = log.genome)
model <- lm(nmax <- log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp., data = log.genome)
model <- lm(log.genome$nmax <- log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp.)
model <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size +log.genome$Genome.size..Mbp.)
drop(model)
drop(model1)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size +log.genome$Genome.size..Mbp.)
drop(model1)
anova(model1,model2)
anova(model2,model1)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size +log.genome$tRNA.count)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$tRNA.count)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$Genome.size..Mbp. *log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$Genome.size..Mbp. +log.genome$tRNA.count)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$tRNA.count)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$Effective.Codon.Size)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$Effective.Codon.Size)
anova(model2,model1)
model1 <- lm(log.genome$nmax ~ log.genome$tRNA.count *log.genome$Effective.Codon.Size)
model2 <- lm(log.genome$nmax ~ log.genome$tRNA.count +log.genome$Effective.Codon.Size)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$tRNA.count *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$tRNA.count +log.genome$Genome.size..Mbp.)
anova(model2,model1)
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$Genome.size..Mbp.)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$Genome.size..Mbp.)
anova(model2,model1)
log.genome
model1 <- lm(log.genome$nmax ~ log.genome$rRNA.count *log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$rRNA.count +log.genome$tRNA.count)
anova(model2,model1)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp. * rRNA.count+ tRNA.count)
model1 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size *log.genome$Genome.size..Mbp. * log.genome$rRNA.count+ log.genome$tRNA.count)
model2 <- lm(log.genome$nmax ~ log.genome$Effective.Codon.Size + log.genome$Genome.size..Mbp. + log.genome$rRNA.count+ log.genome$tRNA.count)
anova(model2,model1)
plot(model1)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model1)
ggplotRegression(model2)
ggplotRegression(model1)
model1
summary(model1)
ggplotRegression(model2)
summary(model2)
model2
model1$model
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2) +
xlab("tRNA Count") +
ylab(expression(m[max])
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2) +
xlab("tRNA Count") +
ylab(expression(m[max])
model1$
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2) +
xlab("tRNA Count") +
ylab(expression(m[max])
ggplotRegression(model2)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[5], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5))) +
xlab("tRNA Count") +
ylab(expression(m[max])
}
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab("tRNA Count") +
ylab(expression(m[max]) +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab("tRNA Count") +
ylab(expression(m[max])) +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(model2)
install.packages(c('vegan', 'ggplot2', 'gplots', 'gtools', 'reshape', 'optparse', 'pheatmap', 'RColorBrewer', 'compute.es'))
install.packages(c("vegan", "ggplot2", "gplots", "gtools", "reshape",
install.packages("optparse")
install.packages("pheatmap")
install.packages("RColorBrewer")
install.packages("optparse")
install.packages("pheatmap")
install.packages("compute.es")
install.packages("gtools")
install.packages("reshape")
install.packages("gplots")
install.packages("vegan")
install.packages("ggplot2")
install.packages("R2WinBUGS")
choose(5, 2)
require(foreign)
require(ggplot2)
require(MASS)
dat <- read.dta("http://www.ats.ucla.edu/stat/stata/dae/nb_data.dta")
dat <- within(dat, {
prog <- factor(prog, levels = 1:3, labels = c("General", "Academic", "Vocational"))
id <- factor(id)
})
summary(dat)
ggplot(dat, aes(daysabs, fill = prog)) + geom_histogram(binwidth = 1) +
facet_grid(prog ~ ., margins = TRUE, scales = "free")
with(dat, tapply(daysabs, prog, function(x) {
sprintf("M (SD) = %1.2f (%1.2f)", mean(x), sd(x))
}))
summary(m1 <- glm.nb(daysabs ~ math + prog, data = dat))
summary(m1 <- glm.nb(daysabs ~ math + prog, data = dat))
m3 <- glm(daysabs ~ math + prog, family = "poisson", data = dat)
pchisq(2 * (logLik(m1) - logLik(m3)), df = 1, lower.tail = FALSE)
(est <- cbind(Estimate = coef(m1), confint(m1)))
exp(est)
rm(list=ls())
getwd()
setwd("~/github/PopGen/I519/HW1/")
library("quantmod")
library("ggplot2")
library("reshape2")
library("wesanderson")
library(data.table)
```
## Import the data and add headers
```{r}
draft <- read.table("./genesize-draft.txt",header=F)
complete <- read.table("./genesize-complete.txt",header=T)
colnames(draft) <- c("Strain", "Genes")
colnames(complete) <- c("Strain", "Genes")
```
# Mean gene number
```{r}
mean(draft[,2])
mean(complete[,2])
```
So the draft genomes have a mean gene number of ~2,679 and the complete genomes have a mean gene number of ~2522. Let's look if there's a significant difference.
## Examine the quantile-quantile plots for the samples
First we make a Q-Q plot that examines both samples.
```{r}
qqplot(draft[,2], complete[,2])
xlim = range(1800, draft)
ylim = range(1800, complete)
qqplot(draft[,2], complete[,2],
xlim = ylim, ylim = ylim,
xlab = "Draft Genomes",
ylab = "Complete Genomes",
main = "Gene Number")
abline(a=0, b=1, lty="dotted")
```
Then we make a Q-Q plot for each sample that compares the theoretical quantiles with sample quantiles.
```{r}
qqnorm(draft[,2],
main = "Gene number in draft genomes")
qqline(draft[,2])
qqnorm(complete[,2],
main = "Gene number in complete genomes")
qqline(complete[,2])
```
We see from above that there is a clear deviation from the theoretical expectation for each sample, suggesting that it would not be a good idea to assume normality. We can then proceed with a Wilcoxon rank-sum test.
```{r}
wilcox.test(draft[,2], complete[,2], alternative = c("two.sided"), paired = FALSE, conf.level = 0.95)
```
There is a significant difference in the number of genes between draft and complete genomes.
```{r}
draft$Type <- rep("Draft",nrow(draft))
complete$Type <- rep("Complete",nrow(complete))
mergeData <- rbind(draft, complete)
mergeData$logGenes <- log(mergeData[,2])
class(mergeData)
head(mergeData)
```
```{r}
palette <- wes_palette(5, name = "FantasticFox", type = "discrete")
ggplot(mergeData, aes(x=Type, y=Genes, fill = Type)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.1) +
scale_fill_manual(values=palette[-2]) +
xlab("Genome Type") +
scale_size_area("Genome Type") +
ylab("Gene Number") +
guides(fill=guide_legend(title=NULL))
```
