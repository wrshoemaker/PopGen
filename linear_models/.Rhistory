P[2]
soilbac1[1]
soilbac1[3]
soilbac1[3000]
soilbac1[300]
site1.ab <- which(soilbac1 > 0)
site1.ab
site1.ab[3]
typeof(soilbac1)
site1.ab <- x[which(-soilbac1 > 0)]
site1.ab <- soilbac1[which(-soilbac1 > 0)]
site1.ab
site1.ab <- soilbac1[which(soilbac1 > 0)]
site1.ab
site1.ab[2]
site1.ab[4]
site1.ab[10]
site1.ab[44]
site1.ab[43]
P <- log(site1.ab) # log-transform the abundances of the RAC and assign them to a vector P
P
P[2]
P[6]
AvgAb <- mean(P) # find the average of the log abundances
site1.ab <- soilbac1[soilbac1 > 0]
site1.ab
P <- log(site1.ab) # log-transform the abundances of the RAC and assign them to a vector P
AvgAb <- mean(P) # find the average of the log abundances
AvgAb
P
site1.ab
X <- 0 # assign zero to variable X
Evar <- 0 # declare a scalar variable Evar
S <- length(which(site1.ab > 0))
for (x in P) { # making use of a 'for' loop. for loops are an elementary control structure in all programming languages.
X = X + (x - AvgAb)^2 / (S - 1)
}
Evar = 1 - (2/pi)*atan(X) # these operations make the value of Evar range between 0 and 1
Evar # print Evar for Site1
invD <- diversity(site1.ab, "inv")
invD
Fisher <- fisher.alpha(site1.ab)
Fisher
site1.ab
invD <- diversity(site1.ab, "inv")
invD
D.inv <- 1/SimpD(site1)
rm(list=ls())
getwd()
setwd("~/GitHub/QB-2017/Week2-Alpha")
require("vegan")
data(BCI)
S.obs <- function(x = ""){
rowSums(x > 0) * 1
}
S.obs(BCI)
C <- function(x = ""){
1 - (sum(x == 1) / rowSums(x))
}
C(BCI)
S.obs(BCI)
package.list <- c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot', 'cowplot', 'MullerPlot')
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
package.list <- c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot2', 'cowplot', 'MullerPlot')
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages(c("backports", "data.table", "digest", "e1071", "htmlTable", "Matrix", "nlme", "Rcpp", "rprojroot", "shiny", "TH.data", "vegan"))
require(rgeos)
require(rgdal)
gc <- c(0.1, 0.11, 0.12, 0.14, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
gc <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.119, 0.12, 0.14, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
test <- as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
len(test)
length(test)
test
s.2 <- as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- gc[1:5]
s.2[(length(s.2)-5):length(s.2)] <- gc[(length(gc)-5):length(gc)]
s.2
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
s.max
gc <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.119, 0.12, 0.13,  0.14, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
test <- as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
s.2 <- as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- gc[1:5]
s.2[(length(s.2)-5):length(s.2)] <- gc[(length(gc)-5):length(gc)]
s.2
print test
test
gc
length(gc)
s.2[1:5] <- gc[1:5]
s.2
s.2 <- as.numeric(filter(gc, rep(1/11,11), circular=F, sides=2))
s.2
s.2[1:5] <- gc[1:5]
s.2
s.2[(length(s.2)-5):length(s.2)] <- gc[(length(gc)-5):length(gc)]
s.2
s.2[(length(s.2)-5):length(s.2)]
gc <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.119, 0.12, 0.13, 0.14,0.15,0.155, 0.156, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
length(gc)
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.119, 0.12, 0.13, 0.14,0.15,0.155, 0.156, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
clear
clean
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.118, 0.119, 0.12, 0.13, 0.14,0.15,0.155, 0.156, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
length(s.2)
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.118, 0.119, 0.12, 0.14,0.15,0.155, 0.156, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.118,0.118, 0.119, 0.12, 0.14,0.15,0.155, 0.156, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.118,0.118, 0.119, 0.12,0.13, 0.14,0.15,0.155, 0.156, 0.16, 0.18, 0.19, 0.19, 0.19, 0.2)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.118,0.118, 0.119, 0.12,0.13, 0.14,0.15,0.155, 0.156, 0.16,0.17,0.175, 0.18, 0.19, 0.19, 0.19, 0.2)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
s.max
s <- c(0.1, 0.11, 0.11, 0.115, 0.115, 0.117, 0.118,0.118, 0.119, 0.12,0.13, 0.14,0.15,0.155, 0.156, 0.16,0.17,0.175, 0.18, 0.19, 0.19, 0.19, 0.2, 0.19)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
s.max
length(s)
s.2 <- as.numeric(s)
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.2
s
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
t.end <- round(t[s.max],0) + 1
t.trim <- t[which(t <= t.end)]
s.trim <- s.2[which(t <= t.end)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
s.max
length(s)
length(s.2)
s.2
grids1<-list(umax=c(0.05,0.1,1),L=c(-5,-0.5,0.1,5,10,20),z=c(-2,-0.5))
grids1
m.gomp<-function(t,pars){
b0<-pars[1]
A<-pars[2]
umax<-pars[3]
L<-pars[4]
b0+A*exp(-exp(umax*exp(1)*(L-t)/A+1))
}
t <- c(1,2,3,4,5,6,7)
pars <- c(1,2,0.5,0.8)
m.gomp(t, pars)
dnorm(mean= 5, sd = 3)
exp(NA)
s <- c(0.01, 0.01, 0.016, 0.02, 0.03, 0.04,0.06)
t <- c(1, 1.2, 1.4, 1.5, 1.8, 1.9, 3.0)
length(t)
length(s)
s <- c(0.01, 0.01, 0.016, 0.02, 0.03, 0.04,0.06, 0.08, 0.09, 0.10, 0.12, 0.14, 0.16, 0.18)
length(s)
t <- c(1, 1.2, 1.4, 1.5, 1.8, 1.9, 3.0, 3.5, 3.8, 4.0, 4.2, 4.4, 4.6)
length (t)
t <- c(1, 1.2, 1.4, 1.5, 1.8, 1.9, 3.0, 3.5, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8)
s.2 <- as.numeric(filter(s, rep(1/11,11), circular=F, sides=2))
s.2[1:5] <- s[1:5]
s.2[(length(s.2)-5):length(s.2)] <- s[(length(s)-5):length(s)]
s.max <- max(which(s.2 == max(s.2, na.rm=T)))
t.end <- round(t[s.max],0) + 1
t.trim <- t[which(t <= t.end)]
s.trim <- s.2[which(t <= t.end)]
grids1<-list(umax=c(0.05,0.1,1),L=c(-5,-0.5,0.1,5,10,20),z=c(-2,-0.5))
start1<-list(b0=intercept.guess,A=max(tmpdata[,2]),umax=NA,L=NA,z=NA)
intercept.guess<-0.1
start1<-list(b0=intercept.guess,A=max(tmpdata[,2]),umax=NA,L=NA,z=NA)
tmpdata <- data.frame(t.trim, s.trim)
start1<-list(b0=intercept.guess,A=max(tmpdata[,2]),umax=NA,L=NA,z=NA)
dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)), sd=exp(z))
s.trim ~ dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)), sd=exp(z))
b0
m.gomp<-function(t,pars){
b0<-pars[1]
A<-pars[2]
umax<-pars[3]
L<-pars[4]
b0+A*exp(-exp(umax*exp(1)*(L-t)/A+1))
}
m.gomp(t.trim,c(b0,A,umax,L))
m.gomp(t.trim,c(2,1,0.3,2))
dnorm(mean=m.gomp(t.trim,c(2,1,0.3,2)), sd=exp(NA))
dnorm(mean=m.gomp(t.trim,c(2,1,0.3,2)), sd=exp(1))
dnorm(mean=m.gomp(t.trim,c(2,1,0.3,2)), sd=exp(NA))
s.trim ~ dnorm(mean=m.gomp(t.trim,c(2,1,0.3,2)), sd=exp(NA))
dnorm(c(1,2,3,4,5), mean = 1, sd =2, log = FALSE)
read.synergy <- function(input = " ", skip = ""){
data.in <- read.delim(input, skip=skip, header=T, as.is=T)
results.start <- which(data.in == "Results")
data.out <- data.in[1:(results.start - 2),]
colnames(data.out)[2] <- "Temp"
data.out$Time <- as.character(data.out$Time)
t.h <- as.numeric(lapply(strsplit(data.out$Time, "\\:"), "[", 1))
t.m <- as.numeric(lapply(strsplit(data.out$Time, "\\:"), "[", 2))
data.out$Time <- round(t.h + t.m/60, 2)
for (i in 1:dim(data.out)[2]){
if (is.numeric(data.out[,i]) == FALSE){data.out[,i] = as.numeric(data.out[,i])}}
return(data.out)
}
ls
pwd
file <- '/Users/WRShoemaker/GitHub/PopGen/Growth_curve/data/raw/GrowthCurve_Example.txt'
data.in <- read.synergy(file, skip = skip)
file
data.in
skip = ""
data.in <- read.synergy(file, skip = skip)
data.in
data.in <- read.delim(/Users/WRShoemaker/GitHub/PopGen/Growth_curve/data/raw/GrowthCurve_Example.txt, skip="", header=T, as.is=T)
data.in <- read.delim("/Users/WRShoemaker/GitHub/PopGen/Growth_curve/data/raw/GrowthCurve_Example.txt", skip="", header=T, as.is=T)
data.in
results.start <- which(data.in == "Results")
data.out <- data.in[1:(results.start - 2),]
colnames(data.out)[2] <- "Temp"
data.out$Time <- as.character(data.out$Time)
t.h <- as.numeric(lapply(strsplit(data.out$Time, "\\:"), "[", 1))
t.m <- as.numeric(lapply(strsplit(data.out$Time, "\\:"), "[", 2))
data.out$Time <- as.character(data.out$Time)
data.out$Time <- as.character(data.out$Time)
data.out$Time
data.in
results.start <- which(data.in == "Results")
data.out <- data.in[1:(results.start - 2),]
data.out
read.synergy <- function(input = " ", skip = ""){
data.in <- read.delim(input, skip=skip, header=T, as.is=T)
results.start <- which(data.in == "Results")
data.out <- data.in[1:(results.start - 2),]
colnames(data.out)[2] <- "Temp"
data.out$Time <- as.character(data.out$Time)
t.h <- as.numeric(lapply(strsplit(data.out$Time, "\\:"), "[", 1))
t.m <- as.numeric(lapply(strsplit(data.out$Time, "\\:"), "[", 2))
data.out$Time <- round(t.h + t.m/60, 2)
for (i in 1:dim(data.out)[2]){
if (is.numeric(data.out[,i]) == FALSE){data.out[,i] = as.numeric(data.out[,i])}}
return(data.out)
}
file <- '/Users/WRShoemaker/GitHub/PopGen/Growth_curve/data/raw/GrowthCurve_Example.txt'
file
data.in <- read.synergy(input, skip = 31)
data.in <- read.synergy(fie, skip = 31)
data.in <- read.synergy(file, skip = 31)
data.in
t.trim <- c(1, 1.2, 1.4, 1.5, 1.8, 1.9, 3.0, 3.5, 3.8, 4.0, 4.2, 4.4, 4.6, 4.8)
m.gomp<-function(t,pars){
b0<-pars[1]
A<-pars[2]
umax<-pars[3]
L<-pars[4]
b0+A*exp(-exp(umax*exp(1)*(L-t)/A+1))
}
s.trim <- c(0.01, 0.01, 0.016, 0.02, 0.03, 0.04,0.06, 0.08, 0.09, 0.10, 0.12, 0.14, 0.16, 0.18)
b0 <- 0.1
A <- 0.15
umax <- 0.5
L <- 3
s.trim~dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)),
sd=exp(z))
dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)),
sd=exp(z))
dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)),
sd=exp(z)
dnorm(mean=m.gomp(t.trim,c(b0,A,umax,L)), sd=exp(z))
dnorm(s.trim, mean=m.gomp(t.trim,c(b0,A,umax,L)), sd=exp(z))
dnorm(s.trim, mean=m.gomp(t.trim,c(b0,A,umax,L)), sd=exp(-0.5))
m.gomp(t.trim,c(b0,A,umax,L)
m.gomp(t.trim,c(b0,A,umax,L))
m.gomp(t.trim,c(b0,A,umax,L))
dnorm(s.trim, mean=m.gomp(t.trim,c(b0,A,umax,L)), sd=exp(-0.5))
install.packages(c("boot", "cluster", "foreign", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival"), lib="/usr/local/Cellar/r/3.3.2/R.framework/Versions/3.3/Resources/library")
library("class", lib.loc="/usr/local/Cellar/r/3.3.2/R.framework/Versions/3.3/Resources/library")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("oilabs")
library(ggplot2)
library(oilabs)
install.packages("oilabs")
install.packages('devtools')
library(devtools)
install_github('OpenIntroOrg/oilabs')
library(oilabs)
character('Hello')
"a"
"hello"
F
f
clear
clear()
set.seed(124)
norm <- rnorm(1000, mean = 0, sd = 1)
norm
hist(norm)
x1_sq <-  rnorm(1000, mean = 0, sd = 1) ** 2
x1_sq
hist(x1_sq, breaks=30, col=adjustcolor("black", alpha.f=0.5))
x1_x2_sq <- (x2 ** 2) + x1_sq
x2 <- rnorm(1000, mean = 0, sd = 1)
x1_x2_sq <- (x2 ** 2) + x1_sq
hist(x1_x2_sq, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
set.seed(124)
norm <- rnorm(1000, mean = 0, sd = 1)
hist(norm)
x1_sq <-  rnorm(1000, mean = 0, sd = 1) ** 2
hist(x1_sq, breaks=30, col=adjustcolor("black", alpha.f=0.5))
x2 <- rnorm(1000, mean = 0, sd = 1)
x1_x2_sq <- (x2 ** 2) + x1_sq
hist(x1_sq, breaks=30, col=adjustcolor("black", alpha.f=0.5))
hist(x1_x2_sq, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
x3 <- rnorm(1000, mean = 0, sd = 1) ** 2
x1_x2_x3_sq <- x3 + x1_x2_sq
hist(x1_sq, breaks=30, col=adjustcolor("black", alpha.f=0.5))
hist(x1_x2_sq, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
hist(x1_x2_x3_sq, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
x3 <- rnorm(1000, mean = 0, sd = 1) ** 2
x1_x2_x3_sq <- x3 + x1_x2_sq
hist(x1_sq, breaks=30, col=adjustcolor("black", alpha.f=0.5))
hist(x1_x2_sq, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
hist(x1_x2_x3_sq, breaks=30, col=adjustcolor("blue", alpha.f=0.5), add=TRUE)
mean(x1_sq)
mean(x1_x2_sq)
mean(x1_x2_x3_sq)
mean(x1_sq)
sd(x1_sq)
mean(x1_x2_sq)
sd(x1_x2_sq)
mean(x1_x2_x3_sq)
sd(x1_x2_x3_sq)
set.seed(124)
norm <- rnorm(1000, mean = 0, sd = 1)
hist(norm)
y_1df <- rchisq(1000, 1)
mean(y_1df)
df(y_1df)
sd(y_1df)
hist(x1_sq, breaks=30, col=adjustcolor("black", alpha.f=0.5))
hist(y_1df, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
y_2df <- rchisq(1000, 2)
mean(y_2df)
sd(y_2df)
hist(y_2df, breaks=30, col=adjustcolor("black", alpha.f=0.5))
hist(x1_x2_sq, breaks=30, col=adjustcolor("red", alpha.f=0.5), add=TRUE)
library(alr4)
install.packages("alr4")
library(ggplot2)
library(dplyr)
library(alr4)
library(ggplot2)
library(dplyr)
dim(Heights)
names(Heights)
head(Heights)
plot(dheight~mheight,data=Heights)
plot(dheight~mheight,data=Heights)
qplot(x=mheight, y=dheight, data=Heights) #ggplot2 package
ggplot(data=Heights, aes(x=mheight, y=dheight)) + geom_point() #ggplot2 package
Heights$mheight_grp <- round(Heights$mheight/2)*2
qplot(data=Heights, x=mheight_grp, y=dheight)
qplot(data=Heights, x=mheight_grp, y=dheight, geom='jitter')
qplot(data=Heights, x=mheight_grp, y=dheight, geom='jitter', color=mheight)
ggplot(data=Heights, aes(x=mheight_grp, y=dheight)) + geom_jitter(aes( color=mheight_grp), alpha=0.5)
Heights_summ <- Heights %>% group_by(mheight_grp) %>%
summarize(sd = sd(dheight), mean=mean(dheight)) #dplyr package
ggplot() +
geom_jitter(data=Heights, aes(x=mheight_grp, y=dheight, color=mheight), alpha=0.5) +
geom_point(data=Heights_summ, aes(x=mheight_grp, y=mean), color='red',size=2)
ggplot() +
geom_jitter(data=Heights, aes(x=mheight_grp, y=dheight, color=mheight), alpha=0.5) +
geom_point(data=Heights_summ, aes(x=mheight_grp, y=mean), color='red',size=2) +
geom_linerange(data=Heights_summ, aes(x=mheight_grp, ymin=mean-1*sd, ymax=mean+1*sd), color='red')
help(geom_smooth)
ggplot(data=Heights, aes(x=mheight, y=dheight)) + geom_point() + geom_smooth(method='loess')
ggplot(data=Heights, aes(x=mheight, y=dheight)) + geom_point() + geom_smooth(method='loess') + geom_smooth(method='lm', color='red')
head(wblake)
help(wblake)
head(ftcollinssnow)
help("ftcollinssnow")
library(alr4)
library(ggplot2)
library(dplyr)
head(wblake)
help(wblake)
library(alr4)
library(ggplot2)
library(dplyr)
toluca <- read.table('Data Sets/Chapter  1 Data Sets/tolucadata.txt')
names(toluca) <- c('lotsize', 'workhrs')
x <- toluca$lotsize
y <- toluca$workhrs
library(alr4)
library(ggplot2)
library(dplyr)
rm(list = ls())
getwd()
setwd("~/GitHub/PopGen/linear_models")
library(alr4)
library(ggplot2)
library(dplyr)
toluca <- read.table('data/Chapter_1_Data_Sets/tolucadata.txt')
names(toluca) <- c('lotsize', 'workhrs')
x <- toluca$lotsize
y <- toluca$workhrs
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point()
(beta1 <- sum((x-mean(x))*(y-mean(y)))/sum((x-mean(x))^2))
(beta0 <- mean(y)-beta1*mean(x))
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + geom_abline(intercept = beta0, slope=beta1, color='red')
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + geom_abline(intercept = beta0, slope=beta1, color='red') + geom_smooth(method='lm')
y_hat <- beta0 + (beta1 * x)
eps <- y - y_hat
mean(eps)
sd(eps)
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + geom_abline(intercept = beta0, slope=beta1, color='red') + geom_smooth(method='lm')
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point((aes(y=y_hat))) + #ggplot2 package
geom_line(color='blue', aes(x, y_hat))
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point((aes(y=y_hat))) + #ggplot2 package
geom_line(color='red', aes(x, y_hat))
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + geom_abline(intercept = beta0, slope=beta1, color='red')
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + geom_abline(intercept = beta0, slope=beta1, color='red')
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + geom_abline(intercept = beta0, slope=beta1, color='red') + geom_smooth(method='lm')
y_hat <- beta0 + (beta1 * x)
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point((aes(y=y_hat))) + #ggplot2 package
geom_line(color='red', aes(x, y_hat))
ggplot(data=toluca, aes(x=lotsize, y=workhrs)) + geom_point() + #ggplot2 package
geom_line(color='red', aes(x, y_hat))
n <- nrow(toluca)
n
library(alr4)
library(ggplot2)
library(dplyr)
head(wblake)
help(wblake)
wblake
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_point()
ggplot(data=Heights, aes(x=mheight_grp, y=dheight)) + geom_jitter(aes( color=mheight_grp), alpha=0.5, width=0.1, height=0)
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(aes( color=mheight_grp), alpha=0.5, width=0.1, height=0)
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(alpha=0.5, width=0.1, height=0)
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(alpha=0.5, width=0.1, height=0) +
scale_color_gradient()
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(alpha=0.5, width=0.1, height=0) +
scale_color_gradient(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(alpha=0.5, width=0.1, height=0) +
scale_colour_gradientn(colours = terrain.colors(10))
terrain.colors(10)
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(alpha=0.5, width=0.1, height=0) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) + geom_jitter(alpha=0.5, width=0.1, height=0) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) +
#geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point(aes(colour = z1)) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) +
#geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point(aes(colour = wblake)) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) +
#geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point() +
scale_colour_gradientn(colours = terrain.colors(10))
wblake
ggplot(data=wblake, aes(x=Age, y=Length)) +
#geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point(aes(colour = Scale)) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) +
#geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point(aes(colour = Scale)) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) +
geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point(aes(colour = Scale)) +
scale_colour_gradientn(colours = terrain.colors(10))
ggplot(data=wblake, aes(x=Age, y=Length)) +
#geom_jitter(alpha=0.5, width=0.1, height=0) +
geom_point(aes(colour = Scale)) +
scale_colour_gradientn(colours = terrain.colors(10))
